<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language
[
	<!ENTITY digitPart "[0-9](?:_?[0-9])*">
	<!ENTITY beforeDigit "(?&lt;![\.\w[:^ascii:]])">
	<!ENTITY beforePointFloat "(?&lt;![\w[:^ascii:]])">

	<!-- http://docs.python.org/3/library/string.html#format-string-syntax:
	     replacement_field ::=  "{" [field_name] ["!" conversion] [":" format_spec] "}"
	     field_name        ::=  arg_name ("." attribute_name | "[" element_index "]")*
	     arg_name          ::=  [identifier | integer]
	     attribute_name    ::=  identifier
	     element_index     ::=  integer | index_string
	     index_string      ::=  <any source character except "]"> +
	     conversion        ::=  "r" | "s" | "a"
	     format_spec       ::=  [[fill]align][sign][z][#][0][width][_,][.precision][type]
	     fill              ::=  <any character>
	     align             ::=  "<" | ">" | "=" | "^"
	     sign              ::=  "+" | "-" | " "
	     width             ::=  integer
	     precision         ::=  integer
	     type              ::=  "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"
	-->
	<!ENTITY format_spec "(?:![rsa])?(?::(?:[^}]?[&lt;&gt;=^])?[ +-]?z?#?0?[0-9]*[_,]?(?:\.[0-9]+)?[bcdeEfFgGnosxX&#37;]?)?">
	<!ENTITY strsubstitution "\{(?:(?:[a-zA-Z0-9_]+|[0-9]+)(?:\.[a-zA-Z0-9_]+|\[[^ \]]+\])*)?&format_spec;?\}">

	<!ENTITY rawString "(?:ru|u?r|)(?:'(?:[^']++|\\')*+'|&quot;(?:[^&quot;]++|\\&quot;)*+&quot;)">
	<!ENTITY formatString "(?:r?f|fr?)(?:'(?:[^'{]++|\\'|\{\{|\{[^}]++\})*+'|&quot;(?:[^&quot;]++|\\&quot;|\{\{|\{[^}]*+\})*+&quot;)">
	<!ENTITY string "&rawString;|&formatString;">
]>
<!-- Pseudocode syntax highlightning v0.01 by Peter Ljunglöf: 
	* based on Python syntax but with some different keywords -->

<!-- Python syntax highlightning v0.9 by Per Wigren -->
<!-- Python syntax highlighting v1.9 by Michael Bueker (improved keyword differentiation) -->
<!-- Python syntax highlighting v1.97 by Paul Giannaros -->
<!-- Python syntax highlighting v1.99 by Primoz Anzur -->
<!-- Python syntax highlighting v2.01 by Paul Giannaros:
	* full format character support
	* unicode string modifier supported -->
<!-- v2.02 remove RegExpr for nums and make indent consistent -->
<!-- v2.03 highlight decorators, remove operator regex, don't highlight parens as operators -->
<!-- v2.04 make alerts visible even if they are directly after ''' or # without a space -->
<!-- v2.06 decorator names can (and often do) contain periods -->
<!-- v2.07 add support for %prog and co, see bug 142832 -->
<!-- v2.08 add missing overloaders, new Python 3 statements, builtins, and keywords -->
<!-- v2.29 recognize escape sequenzes correctly -->
<language name="Pseudocode" alternativeNames="Pseudo" version="1" style="pseudo" indenter="pseudo" kateversion="5.0" section="Scripts" extensions="*.py;*.pyw;*.pyi;SConstruct;SConscript;*.FCMacro" mimetype="application/x-python;text/x-python;text/x-python3" casesensitive="1" author="Peter Ljunglöf" license="">
	<highlighting>
		<list name="import">
			<item>import</item>
			<item>from</item>
			<item>as</item>
		</list>
		<list name="defs">
			<item>abstract</item>
			<item>interface</item>
			<item>class</item>
			<item>subclass</item>
			<item>declare</item>
			<item>define</item>
			<item>function</item>
			<item>constructor</item>
			<item>method</item>
			<item>global</item>
			<item>lambda</item>
		</list>
		<list name="operators">
			<item>and</item>
			<item>extends</item>
			<item>implements</item>
			<item>is</item>
			<item>in</item>
			<item>not</item>
			<item>new</item>
			<item>or</item>
			<item>of</item>
			<item>all</item>
			<item>each</item>
			<item>every</item>
			<item>any</item>
			<item>to</item>
			<item>downto</item>
		</list>
		<list name="flow">
			<item>assert</item>
			<item>break</item>
			<item>continue</item>
			<item>else</item>
			<item>otherwise</item>
			<item>catch</item>
			<item>error</item>
			<item>for</item>
			<item>if</item>
			<item>throw</item>
			<item>return</item>
			<item>try</item>
			<item>while</item>
			<item>repeat</item>
		</list>
		<list name="flow_yield">
			<item>yield</item>
			<!--
				"yield from" added here as a keyword for autocompletion. The actual handling
				is in context="yield" so that we won't need to add space as a weakDeliminator.
			-->
			<item>yield from</item>
		</list>
		<list name="patternmatching">
			<item>match</item>
			<item>case</item>
		</list>
		<list name="builtinfuncs">
			<!-- builtin classes -->
			<item>Array</item>
			<item>Boolean</item>
			<item>Collection</item>
			<item>Comparable</item>
			<item>Comparator</item>
			<item>Dictionary</item>
			<item>Edge</item>
			<item>File</item>
			<item>Float</item>
			<item>Graph</item>
			<item>Int</item>
			<item>Integer</item>
			<item>Iterable</item>
			<item>Iterator</item>
			<item>KVPair</item>
			<item>List</item>
			<item>Map</item>
			<item>Number</item>
			<item>Object</item>
			<item>Pair</item>
			<item>PriorityQueue</item>
			<item>MinPriorityQueue</item>
			<item>MaxPriorityQueue</item>
			<item>Queue</item>
			<item>Set</item>
			<item>SortedMap</item>
			<item>SortedSet</item>
			<item>Tuple</item>
			<item>Type</item>

			<!-- standard ADT methods -->
			<item>next</item>
			<item>compareTo</item>
			<item>iterator</item>
			<item>isEmpty</item>
			<item>size</item>
			<item>add</item>
			<item>get</item>
			<item>set</item>
			<item>append</item>
			<item>push</item>
			<item>pop</item>
			<item>peek</item>
			<item>enqueue</item>
			<item>dequeue</item>
			<item>remove</item>
			<item>removeMin</item>
			<item>removeMax</item>
			<item>delete</item>
			<item>deleteMin</item>
			<item>deleteMax</item>
			<item>getMin</item>
			<item>getMax</item>
			<item>put</item>
			<item>containsKey</item>
			<item>contains</item>

			<!-- common functions -->
			<item>abs</item>
			<item>char</item>
			<item>compare</item>
			<item>enumerate</item>
			<item>evaluate</item>
			<item>filter</item>
			<item>map</item>
			<item>format</item>
			<item>hash</item>
			<item>instance</item>
			<item>subclass</item>
			<item>length</item>
			<item>max</item>
			<item>min</item>
			<item>open</item>
			<item>close</item>
			<item>file</item>
			<item>ord</item>
			<item>power</item>
			<item>print</item>
			<item>range</item>
			<item>reversed</item>
			<item>integer</item>
			<item>int</item>
			<item>float</item>
			<item>round</item>
			<item>slice</item>
			<item>sorted</item>
			<item>string</item>
			<item>sum</item>
		</list>
		<list name="specialvars">
			<item>none</item>
			<item>nothing</item>
			<item>null</item>
			<item>true</item>
			<item>false</item>
			<item>super</item>
			<item>this</item>
		</list>
		<!-- <list name="bindings"></list> -->
		<!-- <list name="overloaders"></list> -->
		<!-- <list name="exceptions"></list> -->
		<contexts>
			<context name="Normal" attribute="Normal Text" lineEndContext="#stay">
				<DetectSpaces attribute="Normal Text"/>

				<DetectChar attribute="Normal Text" char="(" context="Tuple" beginRegion="Tuple"/>
				<DetectChar attribute="Normal Text" char="[" context="List" beginRegion="List"/>
				<DetectChar attribute="Normal Text" char="{" context="Dictionary" beginRegion="Dictionary"/>

				<DetectChar attribute="Comment" char="#" context="Hash comment"/>
				<Detect2Chars attribute="Comment" char="/" char1="/" context="Hash comment"/>

				<keyword attribute="Special Variable" String="specialvars" context="#stay"/>
				<keyword attribute="Flow Control Keyword" String="flow" context="#stay"/>
				<keyword attribute="Operator Keyword" String="operators" context="#stay"/>
				<keyword attribute="Builtin Function" String="builtinfuncs" context="#stay"/>
				<keyword attribute="Definition Keyword" String="defs" context="#stay"/>
				<keyword attribute="Flow Control Keyword" String="flow_yield" context="yield"/>
				<keyword attribute="Flow Control Keyword" String="patternmatching" context="Pattern Matching" lookAhead="1" firstNonSpace="1"/>
				<keyword attribute="Import" String="import" context="#stay"/>
				<!-- <keyword attribute="Exceptions" String="exceptions" context="#stay"/> -->
				<!-- <keyword attribute="Overloaders" String="overloaders" context="#stay"/> -->
				<!-- <keyword attribute="Extensions" String="bindings" context="#stay"/> -->

				<IncludeRules context="Number" />
				<IncludeRules context="CommentVariants" />
				<IncludeRules context="StringVariants" />

				<DetectIdentifier attribute="Normal Text"/>

				<!-- <RegExpr attribute="Decorator" String="@[_a-zA-Z[:^ascii:]][\._a-zA-Z0-9[:^ascii:]]*" firstNonSpace="true"/> -->
				<Detect2Chars attribute="Operator" char=":" char1="=" context="#stay"/>
				<AnyChar attribute="Operator" String="+*/%|=;&lt;&gt;!^&amp;~-@" context="#stay"/>

				<LineContinue attribute="Operator" context="MultiLineExpr"/>

				<Int attribute="Error"/>
			</context>
			<context name="MultiLineExpr" attribute="Normal Text" lineEndContext="#pop" fallthrough="1" fallthroughContext="#pop">
				<DetectSpaces attribute="Normal Text"/>
				<IncludeRules context="StringVariants" />
			</context>

			<!-- https://docs.python.org/2/reference/lexical_analysis.html#integer-and-long-integer-literals -->
			<!-- https://docs.python.org/3/reference/lexical_analysis.html#integer-literals -->
			<context name="Number" attribute="Normal Text" lineEndContext="#pop">
				<!-- fast path -->
				<RegExpr String="&beforeDigit;[0-9]|&beforePointFloat;\.[0-9]" context="AssumeNumber" lookAhead="1"/>
			</context>
			<context name="AssumeNumber" attribute="Normal Text" lineEndContext="#pop">
				<!-- Complex: 1j ; 1.1j ; 1.j ; .1j ; 1e3j ; 1.1e3j ; 1.e3j ; .1e3j -->
				<!-- <RegExpr attribute="Complex" String="(?:&digitPart;(?:\.(?:&digitPart;)?)?|&beforePointFloat;\.&digitPart;)(?:[eE][\+\-]?&digitPart;)?[jJ]" context="CheckSuffixError"/> -->
				<!-- Hexadecimal: 0xA1, Binary: 0b01, Octal: 0o71 -->
				<RegExpr attribute="Hex" String="0[xX](?:_?[0-9a-fA-F])+" context="CheckSuffixError"/>
				<RegExpr attribute="Binary" String="0[bB](?:_?[01])+" context="CheckSuffixError"/>
				<!-- <RegExpr attribute="Octal" String="0[oO](?:_?[0-7])+" context="CheckSuffixError"/> -->
				<!-- Float: 1.1 ; 1. ; .1 ; 1e3 ; 1.1e3 ; 1.e3 ; .1e3 -->
				<RegExpr attribute="Float" String="(?:&digitPart;(?:\.(?:&digitPart;)?)?|\.&digitPart;)[eE][\+\-]?&digitPart;|&digitPart;\.(?:&digitPart;)?|\.&digitPart;" context="CheckSuffixError"/>
				<!-- Decimal: 123 ; 000 -->
				<!-- l and L are python2 suffixes -->
				<RegExpr attribute="Int" String="(?:[1-9](?:_?\d)*|0(?:_?0)*)[lL]?" context="CheckSuffixError"/>
			</context>
			<context name="CheckSuffixError" attribute="Normal Text" lineEndContext="#pop#pop" fallthrough="1" fallthroughContext="#pop#pop">
				<RegExpr attribute="Error" String="[\w\d]+" context="#pop#pop"/>
			</context>

			<context name="yield" attribute="Flow Control Keyword" lineEndContext="#pop" fallthrough="1" fallthroughContext="#pop">
				<DetectSpaces attribute="Normal Text" context="#stay"/>
				<WordDetect attribute="Flow Control Keyword" context="#pop" String="from"/>
			</context>

			<context name="Pattern Matching" attribute="Flow Control Keyword" lineEndContext="#pop">
				<!--
					Python 3.10: https://docs.python.org/3.10/reference/compound_stmts.html#the-match-statement
					( 'match' | 'case' ) expression ':'
					exclude:
					( 'match' | 'case' ) ( 'if' | 'for' | '.' | ':' | '=' | ',' | ']' | ')' ) ...
				-->
				<RegExpr attribute="Flow Control Keyword" String="\w++(?=\s+(?!(?:if|for)\b)[\w'&quot;~]|\s*+(?![.:=\]),]|(?:if|for)\b)((?:&string;|[^#;(){}]|\(\)|\((?1)\)|\{\}|\{(\s*+(?:(?:&string;|[a-zA-Z0-9.]++)\s*+:\s*+(?:&string;|[^#;(){},]|\(\)|\((?1)\)|\{\}|\{(?2)\})++,?)*+)\})+?):)|" context="#pop"/>
				<DetectIdentifier attribute="Normal Text" context="#pop"/>
			</context>

			<context name="#CheckForString" attribute="Normal Text" lineEndContext="#pop" fallthrough="true" fallthroughContext="#pop">
				<DetectSpaces/>
				<LineContinue attribute="Normal Text" context="#pop!CheckForStringNext"/>
			</context>

			<context name="CheckForStringNext" attribute="Normal Text" lineEndContext="#pop" fallthrough="true" fallthroughContext="#pop">
				<DetectSpaces/>
				<LineContinue attribute="Normal Text" context="#stay"/>
				<IncludeRules context="StringVariants"/>
			</context>

			<!-- https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals -->
			<context name="StringVariants" attribute="Normal Text" lineEndContext="#stay">
				<!-- fast path -->
				<RegExpr String="['&quot;]" insensitive="true" context="AssumeStringVariants" lookAhead="1"/>
			</context>
			<context name="AssumeStringVariants" attribute="Normal Text" lineEndContext="#stay">
				<RegExpr attribute="String" String="'''"                insensitive="true" context="#pop!Triple A-string" beginRegion="Triple A-region"/>
				<RegExpr attribute="String" String="&quot;&quot;&quot;" insensitive="true" context="#pop!Triple Q-string" beginRegion="Triple Q-region"/>
				<RegExpr attribute="String" String="'"                  insensitive="true" context="#pop!Single A-string"/>
				<RegExpr attribute="String" String="&quot;"             insensitive="true" context="#pop!Single Q-string"/>
			</context>

			<!-- https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals -->
			<context name="CommentVariants" attribute="Normal Text" lineEndContext="#stay">
				<!-- fast path -->
				<RegExpr String="['&quot;]" insensitive="true" firstNonSpace="true" context="AssumeCommentVariants" lookAhead="1"/>
			</context>
			<context name="AssumeCommentVariants" attribute="Normal Text" lineEndContext="#stay">
				<RegExpr attribute="Comment" String="'''"                insensitive="true" context="#pop!Triple A-comment" beginRegion="Triple A-region"/>
				<RegExpr attribute="Comment" String="&quot;&quot;&quot;" insensitive="true" context="#pop!Triple Q-comment" beginRegion="Triple Q-region"/>
				<RegExpr attribute="Comment" String="'"                  insensitive="true" context="#pop!Single A-comment"/>
				<RegExpr attribute="Comment" String="&quot;"             insensitive="true" context="#pop!Single Q-comment"/>
			</context>

			<context name="Dictionary" attribute="Normal Text" lineEndContext="#stay" noIndentationBasedFolding="true">
				<DetectSpaces/>
				<DetectChar attribute="Normal Text" char="}" context="#pop" endRegion="Dictionary"/>
				<IncludeRules context="StringVariants" />
				<IncludeRules context="Normal" />
			</context>

			<context name="List" attribute="Normal Text" lineEndContext="#stay" noIndentationBasedFolding="true">
				<DetectSpaces/>
				<DetectChar attribute="Normal Text" char="]" context="#pop" endRegion="List"/>
				<IncludeRules context="StringVariants" />
				<IncludeRules context="Normal" />
			</context>

			<context name="Tuple" attribute="Normal Text" lineEndContext="#stay" noIndentationBasedFolding="true">
				<DetectSpaces/>
				<DetectChar attribute="Normal Text" char=")" context="#pop" endRegion="Tuple"/>
				<IncludeRules context="StringVariants" />
				<IncludeRules context="Normal" />
			</context>

			<context name="UnfinishedStringError" attribute="Error" lineEndContext="#stay" noIndentationBasedFolding="true">
				<!-- A single string/comment reached the end of the line without a \ line escape -->
				<!-- We set the following line (or part of it) to the "Error" attribute so that this error is easier to spot -->
				<RegExpr attribute="Error" String="^(\s{4,}|[^[\]()&quot;']{4,}([&quot;'].*)?)" context="#pop" column="0"/>
			</context>

			<!-- Comments -->

			<context name="Hash comment" attribute="Comment" lineEndContext="#pop">
				<DetectSpaces />
				<IncludeRules context="##Comments" />
				<DetectIdentifier/>
			</context>

			<context name="Triple A-comment" attribute="Comment" lineEndContext="#stay" noIndentationBasedFolding="true">
				<DetectSpaces/>
				<StringDetect attribute="Comment" String="'''" context="#pop" endRegion="Triple A-region"/>
				<IncludeRules context="##Comments" />
				<DetectIdentifier/>
				<IncludeRules context="stringescape"/>
				<LineContinue attribute="String Char" context="#stay"/>
			</context>

			<context name="Triple Q-comment" attribute="Comment" lineEndContext="#stay" noIndentationBasedFolding="true">
				<DetectSpaces/>
				<StringDetect attribute="Comment" String="&quot;&quot;&quot;" context="#pop" endRegion="Triple Q-region"/>
				<IncludeRules context="##Comments" />
				<DetectIdentifier/>
				<IncludeRules context="stringescape"/>
				<LineContinue attribute="String Char" context="#stay"/>
			</context>

			<context name="Single A-comment" attribute="Comment" lineEndContext="#pop!UnfinishedStringError">
				<DetectSpaces/>
				<DetectChar attribute="Comment" char="'" context="#pop"/>
				<IncludeRules context="##Comments" />
				<DetectIdentifier/>
				<IncludeRules context="stringescape"/>
				<LineContinue attribute="String Char" context="#stay"/>
			</context>

			<context name="Single Q-comment" attribute="Comment" lineEndContext="#pop!UnfinishedStringError">
				<DetectSpaces/>
				<DetectChar attribute="Comment" char="&quot;" context="#pop"/>
				<IncludeRules context="##Comments" />
				<DetectIdentifier/>
				<IncludeRules context="stringescape"/>
				<LineContinue attribute="String Char" context="#stay"/>
			</context>

			<!-- Strings -->

			<!-- format characters -->
			<context name="stringformat" attribute="String Substitution" lineEndContext="#stay">
				<RegExpr attribute="String Substitution" String="&strsubstitution;" context="#stay"/>
				<Detect2Chars attribute="String Substitution" char="{" char1="{" context="#stay" />
				<Detect2Chars attribute="String Substitution" char="}" char1="}" context="#stay" />
			</context>

			<!-- escape characters -->
			<context name="stringescape" attribute="String Char" lineEndContext="#stay">
				<!-- As this highlighting style is for both, Python 2 and 3,
				we do not know if a normal string is “unicode” or not. So we
				-->
				<RegExpr attribute="String Char" String="\\[\\'&quot;abfnrtv]|\\[0-7]{1,3}|\\x[0-9A-Fa-f]{2}|\\u[0-9A-Fa-f]{4}|\\U[0-9A-Fa-f]{8}|\\N\{[a-zA-Z0-9\- ]+\}" context="#stay"/>
			</context>

			<!-- escape characters -->
			<context name="bytesescape" attribute="String Char" lineEndContext="#stay">
				<!-- As this highlighting style is for both, Python 2 and 3,
				we do not know if a normal string is “unicode” or not. So we
				-->
				<RegExpr attribute="String Char" String="\\[\\'&quot;abfnrtv]|\\[0-7]{1,3}|\\x[0-9A-Fa-f]{2}" context="#stay"/>
			</context>

			<!-- f-literals -->
			<!-- <context name="stringinterpolation" attribute="F-String" lineEndContext="#stay">
				<Detect2Chars attribute="String Char" char="{" char1="{" context="#stay"/>
				<DetectChar attribute="String Substitution" char="{" context="String Interpolation"/>
				<Detect2Chars attribute="String Char" char="}" char1="}" context="#stay"/>
				<DetectChar attribute="Error" char="}" context="#stay"/>
			</context> -->
			<!-- <context name="String Interpolation" attribute="String Substitution" lineEndContext="#stay">
				<DetectChar attribute="Error" char="\" context="#pop"/>
				<RegExpr attribute="String Substitution" String="&format_spec;\}" context="#pop"/>
				<IncludeRules context="Normal"/> 
			</context> -->


			<!--
			It follows a Binary tree of string kinds (not even touching byte literals).
			The levels are:
			1. triple- vs. single-quoted
			2. apostrophe vs. quotation mark
			3. static vs. interpolated (f-literal)
			4. escaped vs. raw
			Adding byte literals wouldn’t make the current 2⁴ into 2⁵ contexts, as there are no byte f-literals
			-->

			<!-- Triple-quoted A-strings -->
			<context name="Triple A-string" attribute="String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<DetectSpaces attribute="String"/>
				<DetectIdentifier attribute="String"/>
				<IncludeRules context="stringescape"/>
				<IncludeRules context="stringformat"/>
				<StringDetect attribute="String" String="'''" context="#pop!#CheckForString" endRegion="Triple A-region"/>
				<LineContinue attribute="String Char" context="#stay"/>
			</context>

			<!-- <context name="Raw Triple A-string" attribute="Raw String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<DetectSpaces attribute="Raw String"/>
				<DetectIdentifier attribute="Raw String"/>
				<Detect2Chars attribute="Raw String" char="\" char1="'"/>
				<Detect2Chars attribute="Raw String" char="\" char1="\"/>
				<IncludeRules context="stringformat"/>
				<StringDetect attribute="Raw String" String="'''" context="#pop!#CheckForString" endRegion="Triple A-region"/>
			</context> -->

			<!-- <context name="Triple A-F-String" attribute="F-String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<DetectSpaces attribute="F-String"/>
				<DetectIdentifier attribute="F-String"/>
				<IncludeRules context="stringescape"/>
				<IncludeRules context="stringinterpolation"/>
				<StringDetect attribute="F-String" String="'''" context="#pop!#CheckForString" endRegion="Triple A-region"/>
				<LineContinue attribute="String Char" context="#stay"/>
			</context> -->

			<!-- <context name="Raw Triple A-F-String" attribute="Raw F-String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<DetectSpaces attribute="Raw F-String"/>
				<DetectIdentifier attribute="Raw F-String"/>
				<Detect2Chars attribute="Raw F-String" char="\" char1="'"/>
				<Detect2Chars attribute="Raw F-String" char="\" char1="\"/>
				<IncludeRules context="stringinterpolation"/>
				<StringDetect attribute="Raw F-String" String="'''" context="#pop!#CheckForString" endRegion="Triple A-region"/>
			</context> -->

			<!-- <context name="Triple A-B-String" attribute="B-String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<RegExpr attribute="B-String" String="([\x20-\x26\x28-\x5B\x5D-\x7E]++|\\(?=[^\\'&quot;abfnrtvx0-7])|\\x(?![0-9a-fA-F]{2})|'(?!''))++"/>
				<IncludeRules context="bytesescape"/>
				<StringDetect attribute="B-String" String="'''" context="#pop!#CheckForString" endRegion="Triple A-region"/>
				<LineContinue attribute="String Char" context="#stay"/>
				<RegExpr attribute="Error" String="."/>
			</context> -->

			<!-- <context name="Raw Triple A-B-String" attribute="Raw B-String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<RegExpr attribute="Raw B-String" String="([\x20-\x26\x28-\x5B\x5D-\x7E]++|\\.?|'(?!''))++"/>
				<StringDetect attribute="Raw B-String" String="'''" context="#pop!#CheckForString" endRegion="Triple A-region"/>
				<RegExpr attribute="Error" String="."/>
			</context> -->

			<!-- Triple-quoted Q-strings -->
			<context name="Triple Q-string" attribute="String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<DetectSpaces attribute="String"/>
				<DetectIdentifier attribute="String"/>
				<IncludeRules context="stringescape"/>
				<IncludeRules context="stringformat"/>
				<StringDetect attribute="String" String="&quot;&quot;&quot;" context="#pop!#CheckForString" endRegion="Triple Q-region"/>
				<LineContinue attribute="String Char" context="#stay"/>
			</context>

			<!-- <context name="Raw Triple Q-string" attribute="Raw String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<DetectSpaces attribute="Raw String"/>
				<DetectIdentifier attribute="Raw String"/>
				<Detect2Chars attribute="Raw String" char="\" char1="&quot;"/>
				<Detect2Chars attribute="Raw String" char="\" char1="\"/>
				<IncludeRules context="stringformat"/>
				<StringDetect attribute="Raw String" String="&quot;&quot;&quot;" context="#pop!#CheckForString" endRegion="Triple Q-region"/>
			</context> -->

			<!-- <context name="Triple Q-F-String" attribute="F-String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<DetectSpaces attribute="F-String"/>
				<DetectIdentifier attribute="F-String"/>
				<IncludeRules context="stringescape"/>
				<IncludeRules context="stringinterpolation"/>
				<StringDetect attribute="F-String" String="&quot;&quot;&quot;" context="#pop!#CheckForString" endRegion="Triple Q-region"/>
				<LineContinue attribute="String Char" context="#stay"/>
			</context> -->

			<!-- <context name="Raw Triple Q-F-String" attribute="Raw F-String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<DetectSpaces attribute="Raw F-String"/>
				<DetectIdentifier attribute="Raw F-String"/>
				<Detect2Chars attribute="Raw F-String" char="\" char1="&quot;"/>
				<Detect2Chars attribute="Raw F-String" char="\" char1="\"/>
				<IncludeRules context="stringinterpolation"/>
				<StringDetect attribute="Raw F-String" String="&quot;&quot;&quot;" context="#pop!#CheckForString" endRegion="Triple Q-region"/>
			</context> -->

			<!-- <context name="Triple Q-B-String" attribute="B-String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<RegExpr attribute="B-String" String="([\x20\x21\x23-\x5B\x5D-\x7E]++|\\(?=[^\\'&quot;abfnrtvx0-7])|\\x(?![0-9a-fA-F]{2})|&quot;(?!&quot;&quot;))++"/>
				<IncludeRules context="bytesescape"/>
				<StringDetect attribute="B-String" String="&quot;&quot;&quot;" context="#pop!#CheckForString" endRegion="Triple Q-region"/>
				<LineContinue attribute="String Char" context="#stay"/>
				<RegExpr attribute="Error" String="."/>
			</context> -->

			<!-- <context name="Raw Triple Q-B-String" attribute="Raw B-String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<RegExpr attribute="Raw B-String" String="([\x20\x21\x23-\x5B\x5D-\x7E]++|\\.?|&quot;(?!&quot;&quot;))++"/>
				<StringDetect attribute="Raw B-String" String="&quot;&quot;&quot;" context="#pop!#CheckForString" endRegion="Triple Q-region"/>
				<RegExpr attribute="Error" String="."/>
			</context> -->


			<!-- Single-quoted A-strings -->
			<context name="Single A-string" attribute="String" lineEndContext="#pop!UnfinishedStringError">
				<DetectSpaces attribute="String"/>
				<DetectIdentifier attribute="String"/>
				<IncludeRules context="stringescape"/>
				<IncludeRules context="stringformat"/>
				<DetectChar attribute="String" char="'" context="#pop!#CheckForString"/>
				<LineContinue attribute="String Char" context="#stay"/>
			</context>

			<!-- <context name="Raw A-string" attribute="Raw String" lineEndContext="#pop!UnfinishedStringError">
				<DetectSpaces attribute="Raw String"/>
				<DetectIdentifier attribute="Raw String"/>
				<Detect2Chars attribute="Raw String" char="\" char1="'"/>
				<Detect2Chars attribute="Raw String" char="\" char1="\"/>
				<IncludeRules context="stringformat"/>
				<DetectChar attribute="Raw String" char="'" context="#pop!#CheckForString"/>
				<LineContinue attribute="Raw String" context="#stay"/>
			</context> -->

			<!-- <context name="Single A-F-String" attribute="F-String" lineEndContext="#pop!UnfinishedStringError">
				<DetectSpaces attribute="F-String"/>
				<DetectIdentifier attribute="F-String"/>
				<IncludeRules context="stringescape"/>
				<IncludeRules context="stringinterpolation"/>
				<DetectChar attribute="F-String" char="'" context="#pop!#CheckForString"/>
				<LineContinue attribute="String Char" context="#stay"/>
			</context> -->

			<!-- <context name="Raw A-F-String" attribute="Raw F-String" lineEndContext="#pop!UnfinishedStringError">
				<DetectSpaces attribute="Raw F-String"/>
				<DetectIdentifier attribute="Raw F-String"/>
				<Detect2Chars attribute="Raw F-String" char="\" char1="'"/>
				<Detect2Chars attribute="Raw F-String" char="\" char1="\"/>
				<IncludeRules context="stringinterpolation"/>
				<DetectChar attribute="Raw F-String" char="'" context="#pop!#CheckForString"/>
				<LineContinue attribute="Raw F-String" context="#stay"/>
			</context> -->

			<!-- <context name="Single A-B-String" attribute="B-String" lineEndContext="#pop!UnfinishedStringError">
				<RegExpr attribute="B-String" String="([\x20-\x26\x28-\x5B\x5D-\x7E]++|\\(?=[^\\'&quot;abfnrtvx0-7])|\\x(?![0-9a-fA-F]{2}))++"/>
				<IncludeRules context="bytesescape"/>
				<DetectChar attribute="B-String" char="'" context="#pop!#CheckForString"/>
				<LineContinue attribute="String Char" context="#stay"/>
				<RegExpr attribute="Error" String="."/>
			</context> -->

			<!-- <context name="Raw A-B-String" attribute="Raw B-String" lineEndContext="#pop!UnfinishedStringError">
				<RegExpr attribute="Raw B-String" String="([\x20-\x26\x28-\x5B\x5D-\x7E]++|\\.)++"/>
				<DetectChar attribute="Raw B-String" char="'" context="#pop!#CheckForString"/>
				<LineContinue attribute="Raw B-String" context="#stay"/>
				<RegExpr attribute="Error" String="."/>
			</context> -->

			<!-- Single-quoted Q-strings -->
			<context name="Single Q-string" attribute="String" lineEndContext="#pop!UnfinishedStringError">
				<DetectSpaces attribute="String"/>
				<DetectIdentifier attribute="String"/>
				<IncludeRules context="stringescape"/>
				<IncludeRules context="stringformat"/>
				<DetectChar attribute="String" char="&quot;" context="#pop!#CheckForString"/>
				<LineContinue attribute="String Char" context="#stay"/>
			</context>

			<!-- <context name="Raw Q-string" attribute="Raw String" lineEndContext="#pop!UnfinishedStringError">
				<DetectSpaces attribute="Raw String"/>
				<DetectIdentifier attribute="Raw String"/>
				<Detect2Chars attribute="Raw String" char="\" char1="&quot;"/>
				<Detect2Chars attribute="Raw String" char="\" char1="\"/>
				<IncludeRules context="stringformat"/>
				<DetectChar attribute="Raw String" char="&quot;" context="#pop!#CheckForString"/>
				<LineContinue attribute="Raw String" context="#stay"/>
			</context> -->

			<!-- <context name="Single Q-F-String" attribute="F-String" lineEndContext="#pop!UnfinishedStringError">
				<DetectSpaces attribute="F-String"/>
				<DetectIdentifier attribute="F-String"/>
				<IncludeRules context="stringescape"/>
				<IncludeRules context="stringinterpolation"/>
				<DetectChar attribute="F-String" char="&quot;" context="#pop!#CheckForString"/>
				<LineContinue attribute="String Char" context="#stay"/>
			</context> -->

			<!-- <context name="Raw Q-F-String" attribute="Raw F-String" lineEndContext="#pop!UnfinishedStringError">
				<DetectSpaces attribute="Raw F-String"/>
				<DetectIdentifier attribute="Raw F-String"/>
				<Detect2Chars attribute="Raw F-String" char="\" char1="&quot;"/>
				<Detect2Chars attribute="Raw F-String" char="\" char1="\"/>
				<IncludeRules context="stringinterpolation"/>
				<DetectChar attribute="Raw F-String" char="&quot;" context="#pop!#CheckForString"/>
				<LineContinue attribute="Raw F-String" context="#stay"/>
			</context> -->

			<!-- <context name="Single Q-B-String" attribute="B-String" lineEndContext="#pop!UnfinishedStringError">
				<RegExpr attribute="B-String" String="([\x20\x21\x23-\x5B\x5D-\x7E]++|\\(?=[^\\'&quot;abfnrtvx0-7])|\\x(?![0-9a-fA-F]{2}))++"/>
				<IncludeRules context="bytesescape"/>
				<DetectChar attribute="B-String" char="&quot;" context="#pop!#CheckForString"/>
				<LineContinue attribute="String Char" context="#stay"/>
				<RegExpr attribute="Error" String="."/>
			</context> -->

			<!-- <context name="Raw Q-B-String" attribute="Raw B-String" lineEndContext="#pop!UnfinishedStringError">
				<RegExpr attribute="Raw B-String" String="([\x20\x21\x23-\x5B\x5D-\x7E]++|\\.)++"/>
				<DetectChar attribute="Raw B-String" char="&quot;" context="#pop!#CheckForString"/>
				<Detect2Chars attribute="Raw B-String" char="\" char1="\"/>
				<LineContinue attribute="Raw B-String" context="#stay"/>
				<RegExpr attribute="Error" String="."/>
			</context> -->

		</contexts>

		<itemDatas>
			<itemData name="Normal Text" defStyleNum="dsNormal" spellChecking="false"/>
			<itemData name="Definition Keyword" defStyleNum="dsKeyword" spellChecking="false"/>
			<itemData name="Operator" defStyleNum="dsOperator" spellChecking="false"/>
			<itemData name="Operator Keyword" defStyleNum="dsKeyword" spellChecking="false"/>
			<itemData name="Flow Control Keyword" defStyleNum="dsControlFlow" spellChecking="false"/>
			<itemData name="Builtin Function" defStyleNum="dsBuiltIn" spellChecking="false"/>
			<itemData name="Special Variable" defStyleNum="dsVariable" spellChecking="false"/>
			<!-- <itemData name="Extensions" defStyleNum="dsExtension" spellChecking="false"/> -->
			<!-- <itemData name="Exceptions" defStyleNum="dsPreprocessor" spellChecking="false"/> -->
			<!-- <itemData name="Overloaders" defStyleNum="dsFunction" spellChecking="false"/> -->
			<itemData name="Import" defStyleNum="dsImport" spellChecking="false"/>
			<itemData name="Float" defStyleNum="dsFloat" spellChecking="false"/>
			<itemData name="Int" defStyleNum="dsDecVal" spellChecking="false"/>
			<itemData name="Hex" defStyleNum="dsBaseN" spellChecking="false"/>
			<itemData name="Octal" defStyleNum="dsBaseN" spellChecking="false"/>
			<itemData name="Binary" defStyleNum="dsBaseN" spellChecking="false"/>
			<itemData name="Complex" defStyleNum="dsOthers" spellChecking="false"/>
			<itemData name="Comment" defStyleNum="dsComment"/>
			<itemData name="String" defStyleNum="dsString"/>
			<!-- <itemData name="Raw String" defStyleNum="dsVerbatimString"/> -->
			<!-- <itemData name="F-String" defStyleNum="dsSpecialString"/> -->
			<!-- <itemData name="Raw F-String" defStyleNum="dsVerbatimString"/> -->
			<!-- <itemData name="B-String" defStyleNum="dsString" spellChecking="false"/> -->
			<!-- <itemData name="Raw B-String" defStyleNum="dsVerbatimString" spellChecking="false"/> -->
			<itemData name="String Char" defStyleNum="dsChar" spellChecking="false"/>
			<itemData name="String Substitution" defStyleNum="dsSpecialChar" spellChecking="false"/>
			<!-- <itemData name="Decorator" defStyleNum="dsAttribute" spellChecking="false"/> -->
			<itemData name="Error" defStyleNum="dsError"/>
		</itemDatas>
	</highlighting>
	<general>
		<folding indentationsensitive="1" />
		<emptyLines>
			<emptyLine regexpr="(?:\s+|\s*#.*)"/>
		</emptyLines>
		<comments>
			<comment name="singleLine" start="#" position="afterwhitespace"/>
		</comments>
		<keywords casesensitive="1" additionalDeliminator="#'"/>
	</general>
</language>

<!-- kate: space-indent off; indent-width 2; -->
